<!DOCTYPE html>
<html>
<head>
    <!-- CSS link -->
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" 
        rel="stylesheet" 
        integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" 
        crossorigin="anonymous">
    <link href="/css/main.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.4.0/css/font-awesome.min.css" rel="stylesheet" type="text/css" />
    <link href="https://fonts.googleapis.com/css?family=Spectral+SC" rel="stylesheet">
    <!-- End CSS link -->

    <!-- HighChart JS Library -->
    <script src="https://code.highcharts.com/stock/highstock.js"></script>
    <script src="https://code.highcharts.com/stock/modules/exporting.js"></script>
    <!-- End HighChart JS Library -->
</head>

<body>
   
    <div class="container" style="margin: 0px; width: 100%; height: 100%;">
        <div class="row">
            <div class="header clearfix"  style="background: rgba(34, 34, 119, 0.63); color: black; padding: 5px 20px;">
            <nav>
                <ul class="nav nav-pills pull-right">
                
                {{#if user}}
                <li class="nav-item">
                    <a class="nav-link" href="/users/logout">Logout</a>
                </li>
                {{else}}
                <li class="nav-item">
                    <a class="nav-link" href="/users/login">Login</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/users/register">Register</a>
                </li>
                {{/if}}
                </ul>
            </nav>
                <h3 style="margin: 10px; font-family: 'Spectral SC', serif;">Trader's Den <sub style="font-size: 11px;">powered by &reg; Oanada</sub></h3>
            </div>
        </div>
        

        <div class="row">
            <div class="col-lg-12" style="padding: 0px;">
                
                {{#if success_msg}}
                <div class="col-lg-6 col-lg-offset-3">
                    <div class="alert alert-success"  style="margin-top: 10px;">{{success_msg}}</div>
                </div>
                {{/if}}
                {{#if error_msg}}
                <div class="col-lg-6 col-lg-offset-3">
                    <div class="alert alert-danger"  style="margin-top: 10px;">{{error_msg}}</div>
                </div>
                {{/if}}
                {{#if error}}
                <div class="col-lg-6 col-lg-offset-3">
                    <div class="alert alert-danger"  style="margin-top: 10px;">{{error}}</div>
                </div>
                {{/if}}
                {{{body}}}
            </div>
        </div>

    </div> <!-- /container -->   
   
    <!-- JS script goes below -->
    <script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
        crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" 
        crossorigin="anonymous"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js"></script>
    <!-- End JS Library-->		

    <!-- Custom JS script -->
    <script>
        let path = window.location.pathname;
        let token = $("#token").val();
        //let accountID = $("#accountID").val();
        let socket;

        function showWarning(item){
            item.show();
            setTimeout(()=>{
                item.hide();
            }, 5000)
        }

        //change the color of the element for 1 second
        function priceDecrease(item){
            item.css("color", "red");
            setTimeout(function(){
            item.css("color", "black");
            }, 1000);
        }

        //change the color of the element for 1 second
        function priceIncrease(item){
            item.css("color", "green");
            setTimeout(function(){
            item.css("color", "black");
            }, 1000);
        }

        //append the new price to the respective instrument
        function appendDash(ask_dom, bid_dom, ask, bid){
            let previous_ask = ask_dom.html();
            let previous_bid = bid_dom.html();

            if (previous_ask === ' -- '){
                //console.log('clearing');
                ask_dom.empty();
                ask_dom.append(ask);
                priceIncrease(ask_dom);
            }
            if (previous_bid === ' -- '){
                //console.log('clearing');
                bid_dom.empty();
                bid_dom.append(bid);
                priceIncrease(bid_dom);
            }
            if (ask > previous_ask){
                //console.log('ask increase');
                ask_dom.empty();
                ask_dom.append(ask);
                priceIncrease(ask_dom);
            } else if (ask < previous_ask){
                //console.log('ask decrease');
                ask_dom.empty();
                ask_dom.append(ask);
                priceDecrease(ask_dom);
            }
            if (bid > previous_bid){
                //console.log('bid increase');
                bid_dom.empty();
                bid_dom.append(bid);
                priceIncrease(bid_dom);
            } else if (bid < previous_bid){
                //console.log('bid decrease');
                bid_dom.empty();
                bid_dom.append(bid);
                priceDecrease(bid_dom);
            }
        }

        function changeTable(){
            //hide the Dash and show Table
            $('#instrument-table').show();
            $('#instrument-board').hide();
            $('#instrument-option').hide();
        }

        function changeBoard(){
            //hide the Dash and show Table
            $('#instrument-table').hide();
            $('#instrument-board').show();
            $('#instrument-option').hide();
        }

        function changeOption(){
            $('#instrument-table').hide();
            $('#instrument-board').hide();
            $('#instrument-option').show();
        }

        function removeInstrument(instrument){
            // remove the Instrument from the Board and Table
            $(`.table-box.${instrument}`).remove();
            $(`.instrument-box.${instrument}`).remove();
            // remove the option-box from the option bar
            $(`.option-box.selected.${instrument}`).remove();
            // append the option-box back to the available area
            $('#options-available').append(
                `<div class="col-lg-12 option-box available ${instrument}">
                    <div class="col-lg-6 instrument-title">${instrument}</div>
                    <button class="col-lg-3 col-lg-offset-3" onclick="addInstrument('${instrument}')" style="margin-top:2px;">
                        <i class="fa fa-check" aria-hidden="true" style="color: green;"></i>
                    </button>
                </div>`
            );
                        //emit the event that remove the instrument to the database
            socket.emit('removeInstrument', {username: $('#username').val(), instrument: instrument});
        }

        function addInstrument(instrument){
            //append the Instrument from the Board and Table
            $('#instrument-board').append(
                `
                <div class="col-lg-5 instrument-box ${instrument}">
                    <div type="button" class="col-lg-12 btn btn-secondary instrument-title" onclick="enterNewChart('${instrument}')">${instrument}</div>
                    <div type="button" class="col-lg-6 btn btn-secondary"  data-toggle="modal" data-target="#newOrder" onclick="sellOrder('${instrument}')" style="padding: 5px 0px;">
                        <div class="col-lg-12 instrument-subtitle">bid</div>
                        <div  class="col-lg-12 instrument-content ${instrument} bid"> -- </div>
                    </div>
                    <div type="button" class="col-lg-6 btn btn-secondary"  data-toggle="modal" data-target="#newOrder" onclick="buyOrder('${instrument}')" style="padding: 5px 0px;">
                        <div class="col-lg-12 instrument-subtitle">ask</div>
                        <div class="col-lg-12 instrument-content ${instrument} ask"> -- </div>
                    </div>
                </div>
                `
            );
            $('#instrument-table').append(
                `<div class="col-lg-12 table-box ${instrument}">
                    <div type="button" class="col-lg-6 btn btn-secondary instrument-title" onclick="enterNewChart('${instrument}')">${instrument}</div>
                    <div type="button" class="col-lg-3 btn btn-secondary instrument-content ${instrument} bid" data-toggle="modal" data-target="#newOrder" style="margin-top: 3px;" onclick="buyOrder('${instrument}')"> -- </div>
                    <div type="button" class="col-lg-3 btn btn-secondary instrument-content ${instrument} ask" data-toggle="modal" data-target="#newOrder" style="margin-top: 3px;" onclick="sellOrder('${instrument}')"> -- </div>
                </div>`
            );
            // remove the option-box from the option bar
            $(`.option-box.available.${instrument}`).remove();
            // append the option-box back to the available area
            $('#options-selected').append(
                `<div class="col-lg-12 option-box selected ${instrument}">
                    <div class="col-lg-6 instrument-title">${instrument}</div>
                    <button class="col-lg-3 col-lg-offset-3" onclick="removeInstrument('${instrument}')" style="margin-top:2px;">
                        <i class="fa fa-times" aria-hidden="true" style="color: red;"></i>
                    </button>
                </div>`
            );
            //emit the event that add the instrument to the database
            socket.emit('addInstrument', {username: $('#username').val(), instrument: instrument});
        }

        function buyOrder(instrument){
            //append the current instrument onto the forms-instrument
            //console.log(`Buying ${instrument}`);
            let current_ask = $(`.${instrument}.ask`)[0].innerText;
            let current_bid = $(`.${instrument}.bid`)[0].innerText;
            $('#form-instruments').empty();
            $('#form-instruments').append(
                `
                    <div class="col-lg-12 form-instrument-title">${instrument}</div>

                    <button type="button" class="col-lg-5 col-lg-offset-1 btn btn-secondary instrument-sell-btn" onclick="changeSell('${instrument}')">
                        <div class="col-lg-12 text-center">Sell</div>
                        <div class="col-lg-12 text-center instrument-content ${instrument} bid">${current_bid}</div>
                    </button>
                    <button type="button" class="col-lg-5 btn btn-secondary instrument-buy-btn" onclick="changeBuy('${instrument}')" style="background:rgba(81, 81, 197, 0.507);">
                        <div class="col-lg-12 text-center">Buy</div>
                        <div class="col-lg-12 text-center instrument-content ${instrument} ask">${current_ask}</div>
                `
            );
            $('#order-price').empty();
            $('#order-price').append(
                `
                <div class="${instrument} ask" id="order-price-text">${current_ask}</div>
                `
            );
            $('#market-order-btn').css('background', 'rgba(81, 81, 197, 0.507)');
            $('#stop-order-btn').css('background', 'white');
            $('#limit-order-btn').css('background', 'white');
            $('.buy-sell').text('Buy');
            $('#order-type').val('MARKET');
            $('#price-expiry').hide();
            if(current_ask != ' -- '){
                $('#price-input').val(`${current_ask}`);
            }
        }

        function sellOrder(instrument){
            //append the current instrument onto the forms-instrument
            //console.log(`Selling ${instrument}`);
            let current_ask = $(`.${instrument}.ask`)[0].innerText;
            let current_bid = $(`.${instrument}.bid`)[0].innerText;
            $('#form-instruments').empty();
            $('#form-instruments').append(
                `
                    <div class="col-lg-12 form-instrument-title">${instrument}</div>

                    <button type="button" class="col-lg-5 btn btn-secondary instrument-sell-btn" onclick="changeSell('${instrument}')" style="background:rgba(81, 81, 197, 0.507);">
                        <div class="col-lg-12 text-center">Sell</div>
                        <div class="col-lg-12 text-center instrument-content ${instrument} bid">${current_bid}</div>
                    </button>
                    <button type="button" class="col-lg-5 btn btn-secondary  instrument-buy-btn" onclick="changeBuy('${instrument}')">
                        <div class="col-lg-12 text-center">Buy</div>
                        <div class="col-lg-12 text-center instrument-content ${instrument} ask">${current_ask}</div>
                    </button>
                `
            );
            $('#order-price').empty();
            $('#order-price').append(
                `
                <div class="${instrument} bid" id="order-price-text">${current_bid}</div>
                `
            );
            $('#market-order-btn').css('background', 'rgba(81, 81, 197, 0.507)');
            $('#stop-order-btn').css('background', 'white');
            $('#limit-order-btn').css('background', 'white');
            $('.buy-sell').text('Sell');
            $('#order-type').val('MARKET');
            $('#price-expiry').hide();
            if(current_bid != ' -- '){
                $('#price-input').val(`${current_bid}`);
            }
        }

        function changeBuy(instrument){
            let current_ask = $(`.${instrument}.ask`)[0].innerText || ' -- ';
            $('.instrument-buy-btn').css('background', 'rgba(81, 81, 197, 0.507)');
            $('.instrument-sell-btn').css('background', 'white');
            $('.buy-sell').text('Buy');
            $('#order-price').empty();
            $('#order-price').append(
                `
                <div class="${instrument} ask" id="order-price-text">${current_ask}</div>
                `
            );
        }

        function changeSell(instrument){
            let current_bid = $(`.${instrument}.bid`)[0].innerText || ' -- ';
            $('.instrument-sell-btn').css('background', 'rgba(81, 81, 197, 0.507)');
            $('.instrument-buy-btn').css('background', 'white');
            $('.buy-sell').text('Sell');
            $('#order-price').empty();
            $('#order-price').append(
                `
                <div class="${instrument} bid" id="order-price-text">${current_bid}</div>
                `
            );
        }

        function marketOrder(){
            $('#market-order-btn').css('background', 'rgba(81, 81, 197, 0.507)');
            $('#stop-order-btn').css('background', 'white');
            $('#limit-order-btn').css('background', 'white');
            $('#price-expiry').hide();
            $('#order-type').val('MARKET');
        }

        function stopOrder(){
            $('#market-order-btn').css('background', 'white');
            $('#stop-order-btn').css('background', 'rgba(81, 81, 197, 0.507)');
            $('#limit-order-btn').css('background', 'white');      
            $('#price-expiry').show();   
            $('#order-type').val('STOP');   
        }

        function limitOrder(){
            $('#market-order-btn').css('background', 'white');
            $('#stop-order-btn').css('background', 'white');
            $('#limit-order-btn').css('background', 'rgba(81, 81, 197, 0.507)');            
            $('#price-expiry').show();
            $('#order-type').val('LIMIT');   
        }

        function appendDropList(item, data){
            //console.log(data.accounts);
            for (let index=data.accounts.length-1; index >= 0; index--){
                item.append(
                    `
                    <option value='${data.accounts[index].id}'>${data.accounts[index].id}</option>
                    `
                );
            }
        }

        function submitTest(order, url){
            axios({
                method: 'post',
                url: url,
                headers: {
                    'Authorization': 'bearer ' + token,
                    'Content-Type': 'application/json'
                    },
                data: order
            })
            .then(function (response) {
                //console.log(response);
                //console.log(response.data);
                //var output = response.data;
                //console.log(output.lastTransactionID);
                //console.log(output.orderCreateTransaction);
                //console.log(output.orderCreateTransaction.type);
                //console.log(output.orderCreateTransaction.units);
                //console.log(output.orderFillTransaction);
                // console.log(response.orderFillTransaction.type);
                // console.log(response.orderFillTransaction.type.tradeOpened.price);
                // console.log(response.orderFillTransaction.type.tradeOpened);
                // console.log(response.orderFillTransaction.time);
                if(response.statusText === "Created") {
                    console.log('Order successfully filled');
                    $('#newOrder').modal('toggle');
                    //$('#mktOrderResponse').html(""); // Removed the content;
                    //$('#mktOrderResponse').append(`Order successfully filled <br>`);
                    //$('#mktOrderResponse').append(`Instrument: ${output.orderFillTransaction.instrument} |  Units : ${output.orderFillTransaction.units} |  Filled at : ${output.orderFillTransaction.price}`);
                };
            })
            .catch(function (error) {
                console.log(error);
                //$('#mktOrderResponse').append("An error has occurred");
            });
        }

        function axiosOrderSubmit(instrument, direction, units, type, url, price="", tif=""){
            if (price === ""){
                let order = { order: {
                    'units': direction + units, 
                    'instrument': instrument, 
                    'timeInForce': "FOK", 
                    'type': type,
                    'positionFill': "DEFAULT"
                }};
                //console.log(order);
                submitTest(order, url);
            } else{
                let order = { order: {
                    'price': price,
                    'units': direction + units, 
                    'instrument': instrument, 
                    'timeInForce': tif, 
                    'type': type,
                    'positionFill': "DEFAULT"
                }};
                //console.log(order);
                submitTest(order, url);
            }
            
        }

        function submitOrder(){
            //get all the data first - instrument, unit, type, price (if limit or stop)
            let order_instrument = $('.form-instrument-title').text();
            let order_direction = ($('.buy-sell').text() === 'Buy') ? "" : "-";
            let order_unit = $('#order-unit').val();
            let order_account = $('#form-account-select').val();
            let order_type = $('#order-type').val();
            let order_link = `https://api-fxpractice.oanda.com/v3/accounts/${order_account}/orders`;
            if (order_type !== 'MARKET'){
                let order_price = $('#price-input').val();
                let order_expiry = $('#form-expiry').val();
                axiosOrderSubmit(order_instrument, order_direction, order_unit, order_type, order_link, order_price, order_expiry);
            } else {
                axiosOrderSubmit(order_instrument, order_direction, order_unit, order_type, order_link);
            }
            
            //console.log(`Entering ${order_type} Order: ${order_unit} of ${order_instrument} for account ${order_account} with direction equal ${order_direction}`);
            //console.log(order_link);
        }

        function getOpenPosition(){
            //get the account number from droplist
            let current_account = $('#position-account-select').val();
            $('#order-view').empty();
            axios({
                method: 'get',
                url: `https://api-fxpractice.oanda.com/v3/accounts/${current_account}/summary`,
                headers: {
                    'Authorization': 'bearer ' + token,
                    'Content-Type': 'application/json'
                    }
            }).then((res)=>{
                console.log(res);
            }).catch((err)=>{

            });
        }

        function getPendingOrder(){
            //get the account number from droplist
            let current_account = $('#position-account-select').val();
            $('#order-view-table').empty();
            axios({
                method: 'get',
                url: `https://api-fxpractice.oanda.com/v3/accounts/${current_account}/pendingOrders`,
                headers: {
                    'Authorization': 'bearer ' + token,
                    'Content-Type': 'application/json'
                    }
            }).then((res)=>{
                console.log(res.data.orders);
                $('#order-view-table').append(
                    `
                    <tr>
                        <th>Ticket</th>
                        <th>Market</th>
                        <th>Units</th>
                        <th>Type</th>
                        <th>Price</th>
                        <th>TimeInforce</th>
                        <th></th>
                    </tr>
                    `
                );
                for (let order_index = res.data.orders.length-1; order_index >= 0; index--){
                    console.log(res.data.orders[order_index]);
                    if (res.data.orders[order_index].units < 0) {
                        let order_type = 'SELL';
                        let order_unit = res.data.orders[order_index].units*-1;
                    } else {
                        let order_type = 'BUY';
                        let order_unit = res.data.orders[order_index].units;
                    }
                    $('#order-view-table').append(
                        `
                        <tr>
                            <td>${res.data.orders[order_index].id}</td>
                            <td>${res.data.orders[order_index].instrument}</td>
                            <td>${order_unit}</td>
                            <td>${order_type} ${res.data.orders[order_index].type}</td>
                            <td>${res.data.orders[order_index].price}</td>
                            <td>${res.data.orders[order_index].timeInForce}/td>
                            <td><button class="btn-btn secondary" onclick="cancelOrder('${res.data.orders[order_index].id}')"><i class="fa fa-times" aria-hidden="true"></i></button></td>
                        </tr>
                        `
                    );
                }
            }).catch((err)=>{

            });
        }

        function getAccountSummary(){
            //get account number from droplist
            let current_account = $('#position-account-select').val();
            $('#account-view').empty();
            //console.log(current_account)
            //append NAV, Unrealized P/L, Balance, Position Value, Margin Used, Margin Available, Leverage (marginrate)
            axios({
                method: 'get',
                url: `https://api-fxpractice.oanda.com/v3/accounts/${current_account}/summary`,
                headers: {
                    'Authorization': 'bearer ' + token,
                    'Content-Type': 'application/json'
                    }
            }).then((res)=>{
                $('#account-view').append(
                    `
                    <div class="col-lg-5 col-lg-offset-1" style="padding: 5px 10px;">
                        <div class="col-lg-6"><b>NAV</b></div>
                        <div class="col-lg-6">HKD ${Number(res.data.account.NAV).toFixed(2)}</div>
                    </div>
                    <div class="col-lg-5" style="padding: 10px;">
                        <div class="col-lg-6"><b>Unrealized P/L</b></div>
                        <div class="col-lg-6">HKD ${Number(res.data.account.unrealizedPL).toFixed(2)}</div>
                    </div>
                    <div class="col-lg-5 col-lg-offset-1" style="padding: 5px 10px;">
                        <div class="col-lg-6"><b>Balance</b></div>
                        <div class="col-lg-6">HKD ${Number(res.data.account.balance).toFixed(2)}</div>
                    </div>
                    <div class="col-lg-5" style="padding: 10px;">
                        <div class="col-lg-6"><b>Realized P/L</b></div>
                        <div class="col-lg-6">HKD ${Number(res.data.account.pl).toFixed(2)}</div>
                    </div>
                    <div class="col-lg-5 col-lg-offset-1" style="padding: 5px 10px;">
                        <div class="col-lg-6"><b>Position Value</b></div>
                        <div class="col-lg-6">HKD ${Number(res.data.account.positionValue).toFixed(2)}</div>
                    </div>
                    <div class="col-lg-5" style="padding: 10px;">
                        <div class="col-lg-6"><b>Margin Used</b></div>
                        <div class="col-lg-6">HKD ${Number(res.data.account.marginUsed).toFixed(2)}</div>
                    </div>
                    <div class="col-lg-5 col-lg-offset-1" style="padding: 5px 10px;">
                        <div class="col-lg-6"><b>Margin Available</b></div>
                        <div class="col-lg-6">HKD ${Number(res.data.account.marginAvailable).toFixed(2)}</div>
                    </div>
                    <div class="col-lg-5" style="padding: 10px;">
                        <div class="col-lg-6"><b>Leverage</b></div>
                        <div class="col-lg-6">${1/(res.data.account.marginRate)} : 1</div>
                    </div>
                    `
                );
            }).catch((err)=>{
                $('#account-view').append(
                    `
                    <div class="col-lg-12 text-center" style="color: red"><i>Cannot access account information</i></div>
                    `
                );
            });
        }

        //Historical Candle.js
        var objectToArray = function(obj) {
            var arr =[];
            for(let o in obj) {
                if (obj.hasOwnProperty(o)) {
                arr.push(parseFloat(obj[o]));
                }
            }
            return arr;
        };

        function historicalData(chart ,instrument, count, granularity) {
            axios.get('https://api-fxpractice.oanda.com/v3/instruments/' + instrument + '/candles?count='+ count +'&price=B&granularity='+granularity, {
                headers: {
                    "Authorization" : "Bearer " + token,
                    'Content-Type': 'application/json'
                }
            })
            .then(function (response) {
            console.log(response.data.candles);
            //console.log(response[])
            for (var i=0; i<response.data.candles.length; i++) {
                var time = Date.parse(response.data.candles[i].time);
                /*
                var o = parseFloat(response.data.candles[i].bid.o);
                var h = parseFloat(response.data.candles[i].bid.h);
                var l = parseFloat(response.data.candles[i].bid.l);
                var c = parseFloat(response.data.candles[i].bid.c);
                */
                var tohlc = objectToArray(response.data.candles[i].bid);
                tohlc.unshift(time);
                //chart.series[0].addPoint([time, o, h, l, c]);
                chart.series[0].addPoint(tohlc, false);
            }
            if (chart == chartTickCandles) {
                chart.setTitle({
                text: instrument + ' S50 Live Candles'
                });
            }
            if (chart == chartHistoricalCandles) {
                chart.setTitle({
                text: instrument + ' Historical Daily Candles'
                });
            }
            chart.redraw();
            /*
            $.getJSON(json, function (data) {

            });
            */
            console.log('for loop Done!');
            /*
            if (JSON.parse(data)['type']=='PRICE') {
                chartLive.series[0].addPoint([Date.parse(JSON.parse(data)['time']), parseFloat(JSON.parse(data)['bids'][0]['price'])]);
            }
            */

            })
            .catch(function (error) {
                console.log(error);
            });
        }
        //End Historical Candle.js

        if (path === '/'){
            //only loads if they are in account info area
            let $misstoken = $('#miss-token');
            let $invalidinfo = $('#invalid-info');
            $('#enter-app').on('click', ()=>{
                console.log(token);
                if (!token){showWarning($misstoken)};
                if (token){
                    //check to see if there is an account or not
                    let link = `https://api-fxpractice.oanda.com/v3/accounts`;
                    axios.get(link, {
                        headers: {'Authorization': `Bearer ${token}`}
                    }).then((res)=>{
                        location.replace("/console/dashboard");
                    }).catch((err)=>{
                        console.log(err);
                        showWarning($invalidinfo);
                    });
                }
            });
        } else if (path.includes('/console')){
            //check if the access token works or not
            let link = `https://api-fxpractice.oanda.com/v3/accounts`;
            axios.get(link, {
                headers: {'Authorization': `Bearer ${token}`}
            }).then((user)=>{
                console.log(user.data);
                appendDropList($('#form-account-select'), user.data);
                appendDropList($('#position-account-select'), user.data);
                getAccountSummary();
                getPendingOrder();
            }).catch(()=>{
                location.replace("/");
            });

            if (path === "/console/dashboard"){
                socket = io.connect('http://localhost:8080');
                
                // for highcharts:
                var candlesPeriod = 30000;
                var candleDone = true;
                var t0 = 0;
                var open, h, l, c;
                var asksPrice, bidsPrice;
                var socketInstrument;

                //call initial chart
                historicalData(chartHistoricalCandles, 'EUR_USD', '200' , 'D');
                historicalData(chartTickCandles, 'EUR_USD', '100' , 'S30');

                $('#position-account-select').on('change',()=>{
                    getAccountSummary();
                });

                socket.on("tick", (data)=>{
                    if (!data.includes('HEARTBEAT')){
                        try{
                            JSON_data = JSON.parse(data);
                        }
                        catch(err){
                            console.log(err);
                            console.log(data);
                        }
                        let ask = JSON_data.asks[0].price;
                        let bid = JSON_data.bids[0].price;
                        let instrument = JSON_data.instrument;
                        //console.log(`Instrument: ${instrument}, bid: ${bid}, ask: ${ask}`);
                        appendDash($(`.${instrument}.ask`), $(`.${instrument}.bid`), ask , bid);

                        // for highcharts:
                        if (instrument == socketInstrument) {
                            var time = Date.parse(JSON_data.time);
                            if (JSON.parse(data)['type']=='PRICE') {
                                asksPrice = parseFloat(ask);
                                bidsPrice = parseFloat(bid);
                                //console.log(chartTickCandles);
                                //chartTickCandles.yAxis.plotLines.value[0] = bidsPrice;
                                //chartTickCandles.yAxis.plotLines.value = asksPrice;
                                /*
                                // for Live Ticks:
                                chartLive.series[0].addPoint([time, asksPrice]);
                                chartLive.series[1].addPoint([time, bidsPrice]);
                                */
                                chartTickCandles.yAxis[0].options.plotLines[0].value = asksPrice;
                                chartTickCandles.yAxis[0].update();
                                chartTickCandles.yAxis[0].options.plotLines[1].value = bidsPrice;
                                chartTickCandles.yAxis[0].update();

                                if (time-t0 >= candlesPeriod && t0 != 0) {
                                    chartTickCandles.series[0].addPoint([(time+t0)/2, o, h, l, c]);
                                    candleDone = true;
                                }

                                // for Live Tick Candles:
                                if (candleDone) {
                                    o = h = l = c = bidsPrice;
                                    t0 = time;
                                    console.log('candleDone');
                                    candleDone = false;
                                }
                                else {
                                    if (bidsPrice > h && time-t0 <= candlesPeriod) {
                                        h = bidsPrice;
                                    }
                                    if (bidsPrice < l && time-t0 <= candlesPeriod) {
                                        l = bidsPrice;
                                    }
                                    c = bidsPrice;
                                }
                            }

                            /*
                            if (asksPrice && bidsPrice) {
                                chartLive.series[0].addPoint([time, asksPrice]);
                                chartLive.series[1].addPoint([time, bidsPrice]);
                            }
                            */
                        }
                        // End for highcharts
                    } //End if !data.includes('HEARTBEAT')
                });

            }

            setInterval(()=>{
                axios.get(link, {
                    headers: {'Authorization': `Bearer ${token}`}
                }).then(()=>{}).catch(()=>{
                    location.replace("/");
                })
            }, 1000*30*60);
        }
    </script>
    <!-- End Custom JS script -->
</body>
</html>